"""
Django settings for payroll_system project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from corsheaders.defaults import default_headers
from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

# Get the path to the .env file in the project root
dotenv_path = os.path.join(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))), '..', '.env')
load_dotenv(dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'knox',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_rest_passwordreset',
    'widget_tweaks',
    'django.contrib.humanize',
    'employees.apps.EmployeesConfig',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'employees.middleware.NoCacheMiddleware',
    # 'employees.middleware.CheckFrontendAccessMiddleware',
]
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
ROOT_URLCONF = 'payroll_system.urls'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = 'Astrotech'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:7000",
    "http://192.168.1.100:3000",
    "http://127.0.0.1:3000",  # React frontend
    "http://127.0.0.1:7000",  # React frontend
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://127.0.0.1:7001"
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",  # React frontend URL
    "http://192.168.1.100:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:7000",  # React frontend # React frontend URL
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:7001",
    "http://localhost:7000"

]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'knox.auth.TokenAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
}
LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
REGISTER_URL = '/register'
REST_KNOX = {
    'TOKEN_TTL': timedelta(minutes=30),
    'AUTO_REFRESH': False,
    'USER_SERIALIZER': 'employees.serializers.LoginSerializer',
}
CORS_ALLOW_HEADERS = list(default_headers) + [
    'authorization',
    "X-CSRFToken"
]

# Import at the top


SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = False

CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

CORS_ALLOW_CREDENTIALS = True

CSRF_COOKIE_NAME = 'csrftoken'

# { For Production, set it to true
# SESSION_COOKIE_HTTPONLY = True
# CSRF_COOKIE_HTTPONLY = False}

REACT_BUILD_DIR = os.path.join(BASE_DIR, 'frontend', 'build')
DJANGO_TEMPLATES_DIR = os.path.join(BASE_DIR, 'backend', 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [DJANGO_TEMPLATES_DIR, REACT_BUILD_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'employees.context_processors.notification_count',
            ],

        },
    },
]
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(REACT_BUILD_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
WSGI_APPLICATION = 'payroll_system.wsgi.application'
AUTH_USER_MODEL = 'employees.CustomUser'
AUTHENICATION_BACKENDS = [
    # 'employees.auth_backend.Email_Backend'
    "django.contrib.auth.backends.ModelBackend"
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'pay.db',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

WEBAUTHN_RP_ID = 'localhost'
# settings.py

WEBAUTHN_RP_ID = "localhost"  # or your domain (no protocol)
WEBAUTHN_ALLOWED_ORIGINS = [
    "http://localhost:7000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    # "https://your-dev-domain.com",
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
# settings.py
# APPEND_SLASH = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'attendance.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


load_dotenv()
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
WEBAUTHN_RP_ID = "localhost"  # or your domain (no protocol)
WEBAUTHN_ALLOWED_ORIGINS = [
    "http://localhost:7000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    # "https://your-dev-domain.com",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:7000",
    "http://192.168.1.100:3000",
    "http://127.0.0.1:3000",  # React frontend
    "http://127.0.0.1:7000",  # React frontend
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://127.0.0.1:7001"
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",  # React frontend URL
    "http://192.168.1.100:3000",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:7000",  # React frontend # React frontend URL
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:7001",
    "http://localhost:7000"

]
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = 'Astrotech'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'attendance.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = False

CSRF_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

CORS_ALLOW_CREDENTIALS = True

CSRF_COOKIE_NAME = 'csrftoken'
